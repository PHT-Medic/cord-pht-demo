group_by(sex) %>%
dplyr::summarize(
number = sum(number_old),
age_mean = sum(age_mean * number_old)/number
)
output_both
source('~/R/cord-pht-demo/R/script.R')
data
source('~/R/cord-pht-demo/R/script.R')
source('~/R/cord-pht-demo/R/script.R')
source('~/R/cord-pht-demo/R/script.R', echo=TRUE)
source('~/R/cord-pht-demo/R/script.R', echo=TRUE)
source('~/R/cord-pht-demo/R/script.R')
source('~/R/cord-pht-demo/R/script.R')
source('~/R/cord-pht-demo/R/script.R')
source('~/R/cord-pht-demo/R/script.R')
source('~/R/cord-pht-demo/R/b_1_2_cfpku_musterloesung.R')
install.packages("rjson")
#     style = list(
#       sep="|",
#       brackets = c("[", "]"),
#       rm_empty_cols = FALSE
#     )
#   )
# )
#
# # download fhir bundles
# bundles <- fhir_search(request = search_request, max_bundles = 50,verbose =2,log_errors = 2)
library("rjson")
json_file <- "./GECCO_patient1.json"
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
View(json_data)
#     style = list(
#       sep="|",
#       brackets = c("[", "]"),
#       rm_empty_cols = FALSE
#     )
#   )
# )
#
# # download fhir bundles
# bundles <- fhir_search(request = search_request, max_bundles = 50,verbose =2,log_errors = 2)
library("rjsonio")
#     style = list(
#       sep="|",
#       brackets = c("[", "]"),
#       rm_empty_cols = FALSE
#     )
#   )
# )
#
# # download fhir bundles
# bundles <- fhir_search(request = search_request, max_bundles = 50,verbose =2,log_errors = 2)
library("RJSONIO")
install.packages("RJSONIO")
#     style = list(
#       sep="|",
#       brackets = c("[", "]"),
#       rm_empty_cols = FALSE
#     )
#   )
# )
#
# # download fhir bundles
# bundles <- fhir_search(request = search_request, max_bundles = 50,verbose =2,log_errors = 2)
library("RJSONIO")
#json_file <- "./GECCO_patient1.json"
#json_data <- fromJSON(paste(readLines(json_file), collapse=""))
mylist = RJSONIO::fromJSON("./GECCO_patient1.json")
View(mylist)
View(mylist)
myxml = xml2::as_xml_document(mylist)
#json_file <- "./GECCO_patient1.json"
#json_data <- fromJSON(paste(readLines(json_file), collapse=""))
mylist = RJSONIO::fromJSON("./POLAR_Testdaten_UKB.json")
myxml = xml2::as_xml_document(mylist)
bundles <- mylist
# crack fhir bundles
dfs <- fhir_crack(bundles, design)
library("rjson")
json_file <- "./GECCO_patient1.json"
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
#mylist = RJSONIO::fromJSON("./POLAR_Testdaten_UKB.json")
#myxml = xml2::as_xml_document(mylist)
bundles <- mylist
# crack fhir bundles
dfs <- fhir_crack(bundles, design)
install.packages("xml2")
library("xml2")
x <- read_xml("<foo> <bar> text <baz/> </bar> </foo>")
x <- read_xml("./fhir_xml_results.xml")
View(x)
# search_request <- paste0(
#   'https://mii-agiop-cord.life.uni-leipzig.de/fhir/',
#   'Condition?',
#   'code=E70.0,E70.1,E84.0,E84.1,E84.8,E84.80,E84.87,E84.88,E84.9',
#   '&_include=Condition:subject'
# )
#
# define design
design <- list(
Conditions = list(
resource = "//Condition",
cols = list(
condition_id = "id",
code = "code/coding/code",
display = "code/coding/display",
text = "code/text",
system = "code/coding/system",
patient_id = "subject/reference",
encounter_id = "encounter/reference",
recorded_date = "recordedDate",
onset_period_start = "onsetPeriod/start",
onset_period_end = "onsetPeriod/end"
),
style = list(
sep="|",
brackets = c("[", "]"),
rm_empty_cols = FALSE
)
),
Patients = list(
resource = "//Patient",
cols = list(
patient_id = "identifier/value",
name_use = "name/use",
name_family = "name/family",
name_given = "name/given",
gender = "gender",
birthdate = "birthDate"
),
style = list(
sep="|",
brackets = c("[", "]"),
rm_empty_cols = FALSE
)
)
)
View(design)
# crack fhir bundles
dfs <- fhir_crack(bundles, design)
library(fhircrackr)
library(tidyverse)
library(ggplot2)
# crack fhir bundles
dfs <- fhir_crack(bundles, design)
# search_request <- paste0(
#   'https://mii-agiop-cord.life.uni-leipzig.de/fhir/',
#   'Condition?',
#   'code=E70.0,E70.1,E84.0,E84.1,E84.8,E84.80,E84.87,E84.88,E84.9',
#   '&_include=Condition:subject'
# )
#
# define design
example1 <- "<Bundle>
<Patient>
<id value='id1'/>
<address>
<use value='home'/>
<city value='Amsterdam'/>
<type value='physical'/>
<country value='Netherlands'/>
</address>
<name>
<given value='Marie'/>
</name>
</Patient>
4 example_bundles1
<Patient>
<id value='id3'/>
<address>
<use value='home'/>
<city value='Berlin'/>
</address>
<address>
<type value='postal'/>
<country value='France'/>
</address>
<address>
<use value='work'/>
<city value='London'/>
<type value='postal'/>
<country value='England'/>
</address>
<name>
<given value='Frank'/>
</name>
<name>
<given value='Max'/>
</name>
</Patient>
</Bundle>"
# search_request <- paste0(
#   'https://mii-agiop-cord.life.uni-leipzig.de/fhir/',
#   'Condition?',
#   'code=E70.0,E70.1,E84.0,E84.1,E84.8,E84.80,E84.87,E84.88,E84.9',
#   '&_include=Condition:subject'
# )
#
# define design
example_bundles1 <- "<Bundle>
<Patient>
<id value='id1'/>
<address>
<use value='home'/>
<city value='Amsterdam'/>
<type value='physical'/>
<country value='Netherlands'/>
</address>
<name>
<given value='Marie'/>
</name>
</Patient>
4 example_bundles1
<Patient>
<id value='id3'/>
<address>
<use value='home'/>
<city value='Berlin'/>
</address>
<address>
<type value='postal'/>
<country value='France'/>
</address>
<address>
<use value='work'/>
<city value='London'/>
<type value='postal'/>
<country value='England'/>
</address>
<name>
<given value='Frank'/>
</name>
<name>
<given value='Max'/>
</name>
</Patient>
</Bundle>"
fhir_unserialize(bundles = example_bundles1)
# search_request <- paste0(
#   'https://mii-agiop-cord.life.uni-leipzig.de/fhir/',
#   'Condition?',
#   'code=E70.0,E70.1,E84.0,E84.1,E84.8,E84.80,E84.87,E84.88,E84.9',
#   '&_include=Condition:subject'
# )
#
# define design
x <- read_xml("<Bundle>
<Patient>
<id value='id1'/>
<address>
<use value='home'/>
<city value='Amsterdam'/>
<type value='physical'/>
<country value='Netherlands'/>
</address>
<name>
<given value='Marie'/>
</name>
</Patient>
4 example_bundles1
<Patient>
<id value='id3'/>
<address>
<use value='home'/>
<city value='Berlin'/>
</address>
<address>
<type value='postal'/>
<country value='France'/>
</address>
<address>
<use value='work'/>
<city value='London'/>
<type value='postal'/>
<country value='England'/>
</address>
<name>
<given value='Frank'/>
</name>
<name>
<given value='Max'/>
</name>
</Patient>
</Bundle>")
fhir_unserialize(bundles = x)#example_bundles1)
# search_request <- paste0(
#   'https://mii-agiop-cord.life.uni-leipzig.de/fhir/',
#   'Condition?',
#   'code=E70.0,E70.1,E84.0,E84.1,E84.8,E84.80,E84.87,E84.88,E84.9',
#   '&_include=Condition:subject'
# )
#
# define design
loaded_bundles <- fhir_load("./fhir/")
View(loaded_bundles)
fhir_unserialize(bundles = loaded_bundles)#example_bundles1)
# crack fhir bundles
dfs <- fhir_crack(loaded_bundles, design)
View(dfs)
View(dfs)
View(dfs)
View(dfs)
# save raw patients dataframe
patients_raw <- dfs$Patients
View(patients_raw)
# unnest raw patients dataframe columns name/use and name/family
patients_tmp <- fhir_melt(patients_raw,
columns = c('name_use','name_family'),
brackets = c('[',']'), sep = '|', all_columns = TRUE,)
# remove brackets from cells
patients_tmp <- fhir_rm_indices(patients_tmp, brackets = c("[", "]") )
# filter by official name/use
patients_tmp <- patients_tmp[patients_tmp$name_use == 'official',]
# calculate age in years by birthdate
patients_tmp$age <- round( as.double( as.Date( Sys.time() ) - as.Date( patients_tmp$birthdate ) ) / 365.25, 2 )
# remove duplicate patients
patients <- patients_tmp[!duplicated(patients_tmp$patient_id),]
# save raw conditions dataframe
conditions_raw <- dfs$Conditions
# unnest raw conditions dataframe columns code/coding/code, code/coding/display, code/coding/system
conditions_tmp <- fhir_melt(conditions_raw,
columns = c('code','display','system'),
brackets = c('[',']'), sep = '|', all_columns = TRUE,)
conditions_tmp <- fhir_melt(conditions_tmp,
columns = c('code','display','system'),
brackets = c('[',']'), sep = '|', all_columns = TRUE,)
# remove brackets from cells
conditions_tmp <- fhir_rm_indices(conditions_tmp, brackets = c("[", "]") )
# filter conditions by system = icd-10-gm
conditions_tmp <- conditions_tmp[conditions_tmp$system == 'http://fhir.de/CodeSystem/dimdi/icd-10-gm',]
# remove duplicate patients
conditions <- conditions_tmp[!duplicated(conditions_tmp$patient_id),]
View(patients)
View(patients_raw)
library(fhircrackr)
library(tidyverse)
library(ggplot2)
# search_request <- paste0(
#   'https://mii-agiop-cord.life.uni-leipzig.de/fhir/',
#   'Condition?',
#   'code=E70.0,E70.1,E84.0,E84.1,E84.8,E84.80,E84.87,E84.88,E84.9',
#   '&_include=Condition:subject'
# )
#
# define design
loaded_bundles <- fhir_load("./fhir/")
fhir_unserialize(bundles = loaded_bundles)#example_bundles1)
design <- list(
Conditions = list(
resource = "//Condition",
cols = list(
condition_id = "id",
code = "code/coding/code",
display = "code/coding/display",
text = "code/text",
system = "code/coding/system",
patient_id = "subject/reference",
encounter_id = "encounter/reference",
recorded_date = "recordedDate",
onset_period_start = "onsetPeriod/start",
onset_period_end = "onsetPeriod/end"
),
style = list(
sep="|",
brackets = c("[", "]"),
rm_empty_cols = FALSE
)
),
Patients = list(
resource = "//Patient",
cols = list(
patient_id = "identifier/value",
name_use = "name/use",
name_family = "name/family",
name_given = "name/given",
gender = "gender",
birthdate = "birthDate"
),
style = list(
sep="|",
brackets = c("[", "]"),
rm_empty_cols = FALSE
)
)
)
library(fhircrackr)
############################################################################################################################
##         Zur Alterspyramide zu rechnen
##############################################################################################################################
library(tidyverse)
library(eeptools) # um Alter zu berechnen
library(ggplot2)# fÃ¼r muster age pyramid
library(fhircrackr)
# empty global enviroment
rm(list = ls())
options(warn=-1)# warnung ausblenden
#LOAD Data from importet FHIR
loaded_bundles <- fhir_load("./fhir/")
design <- list(
Conditions = list(
resource = "//Condition",
cols = list(
condition_id = "id",
code = "code/coding/code",
display = "code/coding/display",
text = "code/text",
system = "code/coding/system",
patient_id = "subject/reference",
encounter_id = "encounter/reference",
recorded_date = "recordedDate",
onset_period_start = "onsetPeriod/start",
onset_period_end = "onsetPeriod/end"
),
style = list(
sep="|",
brackets = c("[", "]"),
rm_empty_cols = FALSE
)
),
Patients = list(
resource = "//Patient",
cols = list(
patient_id = "identifier/value",
name_use = "name/use",
name_family = "name/family",
name_given = "name/given",
gender = "gender",
birthdate = "birthDate"
),
style = list(
sep="|",
brackets = c("[", "]"),
rm_empty_cols = FALSE
)
)
)
# crack fhir bundles
dfs <- fhir_crack(loaded_bundles, design)
# save raw patients dataframe
patients_raw <- dfs$Patients
View(patients_raw)
# empty global enviroment
rm(list = ls())
options(warn=-1)# warnung ausblenden
#LOAD Data from importet FHIR
loaded_bundles <- fhir_load("./fhir/")
design <- list(
Patients = list(
resource = "//Patient",
cols = list(
patient_id = "id",
name_use = "name/use",
name_family = "name/family",
name_given = "name/given",
gender = "gender",
birthdate = "birthDate"
),
style = list(
sep="|",
brackets = c("[", "]"),
rm_empty_cols = FALSE
)
)
)
# crack fhir bundles
dfs <- fhir_crack(loaded_bundles, design)
# save raw patients dataframe
patients_raw <- dfs$Patients
View(patients_raw)
design <- list(
Patients = list(
resource = "//Patient",
cols = list(
patient_id = "id",
managing_orga = "managingOrganization/reference",
name_family = "name/family",
name_given = "name/given",
gender = "gender",
birthdate = "birthDate"
),
style = list(
sep="|",
brackets = c("[", "]"),
rm_empty_cols = FALSE
)
)
)
# crack fhir bundles
dfs <- fhir_crack(loaded_bundles, design)
# save raw patients dataframe
patients_raw <- dfs$Patients
View(patients_raw)
design <- list(
Patients = list(
resource = "//Patient",
cols = list(
patient_id = "id",
managing_orga = "managingOrganization/reference",
name_family = "name/family",
name_given = "name/given",
gender = "gender",
birthdate = "birthDate"
)
)
)
# crack fhir bundles
dfs <- fhir_crack(loaded_bundles, design)
# save raw patients dataframe
patients_raw <- dfs$Patients
View(patients_raw)
View(dfs)
