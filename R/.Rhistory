output_pht[1]= output_pht[1] + previous_mean$V1[2]
print(output_pht[1] + previous_mean$V1[2])
print(as.numeric(output_pht[1]) + previous_mean$V1[2])
print(as.numeric(output_pht[1]) + as.numeric(previous_mean$V1[2]))
for (i in 1:5){
output_pht[i] <- output_pht[i] + as.numeric(previous_mean$V1[i+1]))
}
output_pht[i] <- output_pht[i] + as.numeric(previous_mean$V1[i+1])
i<-0
for (i in 1:5){
output_pht[i] <- output_pht[i] + as.numeric(previous_mean$V1[i+1])
}
print(output_pht[1])
print(output_pht)
output_pht = c(length(data_pht_man$AngabeAlter), mean(data_pht_man$AngabeAlter), length(data_pht_woman$AngabeAlter), mean(data_pht_woman$AngabeAlter))
previous_mean <- read.table(paste(result_folder,"result_mean.csv", sep = ""),
header = FALSE)
View(previous_mean)
for (i in 1:4){
output_pht[i] <- output_pht[i] + as.numeric(previous_mean$V1[i+1])
print(as.numeric(previous_mean$V1[i+1]))
}
print(previous_mean$V1[i+1])
output_pht[i] <- output_pht[i] + as.double(previous_mean$V1[i+1])
print(as.double(previous_mean$V1[i+1]))
for (i in 1:4){
output_pht[i] <- output_pht[i] + as.double(previous_mean$V1[i+1])
print(previous_mean$V1[i+1])
}
previous_mean <- read.table(paste(result_folder,"result_mean.csv"),
header = FALSE)
#Check if there are previous results -> if yes add up
if (file.exists(paste(result_folder,"result_mean.csv", sep = ""))) {
previous_mean <- read.table(paste(result_folder,"result_mean.csv"),
header = FALSE)
i<-0
for (i in 1:4){
output_pht[i] <- output_pht[i] + as.double(previous_mean$V1[i+1])
print(previous_mean$V1[i+1])
}
print(output_pht)
#data <- rbind(stratified_wide, data_pht)
message("previous PHT result found -> Add up")
}
#Check if there are previous results -> if yes add up
if (file.exists(paste(result_folder,"result_mean.csv", sep = ""))) {
previous_mean <- read.table(paste(result_folder,"result_mean.csv"),
header = FALSE)
i<-0
for (i in 1:4){
output_pht[i] <- output_pht[i] + as.double(previous_mean$V1[i+1])
print(previous_mean$V1[i+1])
}
print(output_pht)
#data <- rbind(stratified_wide, data_pht)
message("previous PHT result found -> Add up")
}
previous_mean <- read.table(paste(result_folder,"result_mean.csv"),
header = FALSE)
paste(result_folder,"result_mean.csv")
#Check if there are previous results -> if yes add up
if (file.exists(paste(result_folder,"result_mean.csv", sep = ""))) {
previous_mean <- read.table(paste(result_folder,"result_mean.csv", sep = ""),
header = FALSE)
i<-0
for (i in 1:4){
output_pht[i] <- output_pht[i] + as.double(previous_mean$V1[i+1])
print(previous_mean$V1[i+1])
}
print(output_pht)
#data <- rbind(stratified_wide, data_pht)
message("previous PHT result found -> Add up")
}
#WRITE Mean Data for PHT and add up if available ---------------------------
data_pht_man = data %>% subset(AngabeGeschlecht=="m")
data_pht_woman = data %>% subset(AngabeGeschlecht=="f")
output_pht = c(length(data_pht_man$AngabeAlter), as.double(mean(data_pht_man$AngabeAlter)), length(data_pht_woman$AngabeAlter), as.double(mean(data_pht_woman$AngabeAlter)))
write.csv2(output_pht, "./opt/pht_results/result_mean.csv", row.names = FALSE)
#Check if there are previous results -> if yes add up
if (file.exists(paste(result_folder,"result_mean.csv", sep = ""))) {
previous_mean <- read.table(paste(result_folder,"result_mean.csv", sep = ""),
header = FALSE)
i<-0
for (i in 1:4){
output_pht[i] <- output_pht[i] + as.double(previous_mean$V1[i+1])
print(previous_mean$V1[i+1])
}
print(output_pht)
#data <- rbind(stratified_wide, data_pht)
message("previous PHT result found -> Add up")
}
output_pht = c(length(data_pht_man$AngabeAlter), as.double(mean(data_pht_man$AngabeAlter)), length(data_pht_woman$AngabeAlter), as.double(mean(data_pht_woman$AngabeAlter)))
write.table(output_pht, "./opt/pht_results/result_mean.csv", row.names = FALSE)
write.csv(output_pht, "./opt/pht_results/result_mean.csv", row.names = FALSE)
library(dqLib)
library(openxlsx)
# install R package
setwd("./")
rm(list = ls())
library(devtools)
install_github("https://github.com/KaisTahar/dqLib")
########## data import #############
# import CORD med data
studycode = "FHIR_TestData"
path="http://141.5.101.1:8080/fhir/"
medData <- NULL
if (grepl("fhir", path))
{
source("./R/dqFhirInterface.R")
medData <-instData
}else{ ext <-getFileExtension (path)
if (ext=="csv") medData <- read.table(path, sep=";", dec=",",  header=T, na.strings=c("","NA"), encoding = "latin1")
if (ext=="xlsx") medData <- read.xlsx(path, sheet=1,skipEmptyRows = TRUE)
}
medData <- NULL
if (grepl("fhir", path))
{
source("./R/dqFhirInterface.R")
medData <-instData
}else{ ext <-getFileExtension (path)
if (ext=="csv") medData <- read.table(path, sep=";", dec=",",  header=T, na.strings=c("","NA"), encoding = "latin1")
if (ext=="xlsx") medData <- read.xlsx(path, sheet=1,skipEmptyRows = TRUE)
}
source("./R/dqFhirInterface.R")
getwd()
############################################################################################################################
##         Zur Alterspyramide zu rechnen
##############################################################################################################################
library(tidyverse)
library(eeptools) # um Alter zu berechnen
library(ggplot2)# fÃ¼r muster age pyramid
options(warn=-1)# warnung ausblenden
#############################################################################################################
# FÃ¼gen Sie die Eingabedaten zu Ihrem aktuellen Arbeitsverzeichnis hinzu und geben Sie den Pfad an
###########################################################################################################################################
#Input von andere Team _Condition_code=E84.0,E84.1,E84.80,E84.87,E84.88,E84.9,O80_2021-03-03_15-25-58
#data <- read.csv("r/projectathon/filename.csv")
###############################################################################################################
data_folder <- "./opt/pht_data/"
result_folder <- "./opt/pht_results/"
print(paste(data_folder, "A2-1.csv", sep = ""))
data <- read.csv(paste(data_folder ,"A2-1.csv", sep = ""))# aus projektbereich ordner
# Eleminiere doppelte Patienten
data <- data %>% distinct(PatientIdentifikator, AngabeDiag1, .keep_all = TRUE)
data$PatientIdentifikator <- NULL
# Berechne Alter auf der grund von Geburtsdatum
data$AngabeAlter <- floor(age_calc(as.Date(data$AngabeGeburtsdatum), unit="years"))
data$AngabeGeburtsdatum <- NULL
#WRITE Mean Data for PHT and add up if available ---------------------------
data_pht_man = data %>% subset(AngabeGeschlecht=="m")
data_pht_woman = data %>% subset(AngabeGeschlecht=="f")
output_pht = c(length(data_pht_man$AngabeAlter), as.double(mean(data_pht_man$AngabeAlter)), length(data_pht_woman$AngabeAlter), as.double(mean(data_pht_woman$AngabeAlter)))
#Check if there are previous results -> if yes add up
if (file.exists(paste(result_folder,"result_mean.csv", sep = ""))) {
previous_mean <- read.table(paste(result_folder,"result_mean.csv", sep = ""),
header = FALSE)
i<-0
for (i in 1:4){
output_pht[i] <- output_pht[i] + as.double(previous_mean$V1[i+1])
print(previous_mean$V1[i+1])
}
print(output_pht)
#data <- rbind(stratified_wide, data_pht)
message("previous PHT result found -> Add up")
}
print(output_pht)
write.csv(output_pht, "./opt/pht_results/result_mean.csv", row.names = FALSE)
# Teile in Altersgruppen ein
data$AngabeAlter <- cut(data$AngabeAlter, breaks = c(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120))
# Gruppiere
result  <- as.data.frame(data %>%
group_by(Einrichtungsidentifikator, AngabeDiag1, AngabeGeschlecht, AngabeAlter) %>%
summarise(Anzahl = n()))
# Entferne nicht benoetigte Spalten
result$TextDiagnose1 <- NULL
result$TextDiagnose2 <- NULL
result$AngabeDiag2 <- NULL
################## Um der Alterspyramid zu rechnen######################################################################
# Nehmen wir Geschlechht, Alter, Anzahl
############################################################################################################################
stratified <- result[,c('AngabeGeschlecht','AngabeAlter','Anzahl')]
stratified_female <- (data = stratified %>% subset(AngabeGeschlecht=="f"))
stratified_male <- (data = stratified %>% subset(AngabeGeschlecht=="m")) %>% transform(Anzahl = (data = stratified %>% subset(AngabeGeschlecht=="m"))$Anzahl * -1 )
stratified_wide <- rbind(stratified_female,stratified_male)
#Abkuerzung Ã¤ndern statt "f", "female" und statt "m" "male" verwenden
stratified_wide$AngabeGeschlecht [stratified_wide$AngabeGeschlecht == "f"] <- "female"
stratified_wide$AngabeGeschlecht [stratified_wide$AngabeGeschlecht == "m"] <- "male"
#wenn im PHT zuvor daten erstellt wurde -> auslesen
if (file.exists(paste(result_folder,"result_table.csv", sep = ""))) {
data_pht <- read.csv(paste(result_folder,"result_table.csv", sep = ""))#("pht/results.csv")
data <- rbind(stratified_wide, data_pht)
message("previous PHT result found -> Add up")
} else {
message("No previous PHT result found -> Assume first")
}
#FUER PHT DAS GANZE RAUSSCHREIBEN - inklusive neuen Daten
write.csv(stratified_wide, "./opt/pht_results/result_table.csv")
#Labellen name als angabe
names(stratified_wide)[names(stratified_wide)== "AngabeAlter"] <- "ageG"
names(stratified_wide)[names(stratified_wide)== "Anzahl"] <- "Count"
names(stratified_wide)[names(stratified_wide)== "AngabeGeschlecht"] <- "gender"
#Alterspyramid kozipieren
g <- ggplot(stratified_wide,aes(x=Count,y=ageG,fill=gender))
g + geom_bar(stat="identity")
############################################################################################################################
##         Zur Alterspyramide zu rechnen
##############################################################################################################################
library(tidyverse)
############################################################################################################################
##         Zur Alterspyramide zu rechnen
##############################################################################################################################
library(tidyverse)
library(eeptools) # um Alter zu berechnen
library(ggplot2)# fÃ¼r muster age pyramid
options(warn=-1)# warnung ausblenden
#############################################################################################################
# FÃ¼gen Sie die Eingabedaten zu Ihrem aktuellen Arbeitsverzeichnis hinzu und geben Sie den Pfad an
###########################################################################################################################################
#Input von andere Team _Condition_code=E84.0,E84.1,E84.80,E84.87,E84.88,E84.9,O80_2021-03-03_15-25-58
#data <- read.csv("r/projectathon/filename.csv")
###############################################################################################################
data_folder <- "./opt/pht_data/"
result_folder <- "./opt/pht_results/"
print(paste(data_folder, "A2-1.csv", sep = ""))
data <- read.csv(paste(data_folder ,"A2-1.csv", sep = ""))# aus projektbereich ordner
# Eleminiere doppelte Patienten
data <- data %>% distinct(PatientIdentifikator, AngabeDiag1, .keep_all = TRUE)
data$PatientIdentifikator <- NULL
# Berechne Alter auf der grund von Geburtsdatum
data$AngabeAlter <- floor(age_calc(as.Date(data$AngabeGeburtsdatum), unit="years"))
data$AngabeGeburtsdatum <- NULL
#WRITE Mean Data for PHT and add up if available ---------------------------
data_pht_man = data %>% subset(AngabeGeschlecht=="m")
data_pht_woman = data %>% subset(AngabeGeschlecht=="f")
output_pht = c(length(data_pht_man$AngabeAlter), as.double(mean(data_pht_man$AngabeAlter)), length(data_pht_woman$AngabeAlter), as.double(mean(data_pht_woman$AngabeAlter)))
write.csv(output_pht, "./opt/pht_results/result_mean.csv", row.names = FALSE)
#Check if there are previous results -> if yes add up
if (file.exists(paste(result_folder,"result_mean.csv", sep = ""))) {
previous_mean <- read.table(paste(result_folder,"result_mean.csv", sep = ""),
header = FALSE)
i<-0
for (i in 1:4){
output_pht[i] <- output_pht[i] + as.double(previous_mean$V1[i+1])
print(previous_mean$V1[i+1])
}
print(output_pht)
#data <- rbind(stratified_wide, data_pht)
message("previous PHT result found -> Add up")
}
############################################################################################################################
##         Zur Alterspyramide zu rechnen
##############################################################################################################################
library(tidyverse)
library(eeptools) # um Alter zu berechnen
library(ggplot2)# fÃ¼r muster age pyramid
options(warn=-1)# warnung ausblenden
#############################################################################################################
# FÃ¼gen Sie die Eingabedaten zu Ihrem aktuellen Arbeitsverzeichnis hinzu und geben Sie den Pfad an
###########################################################################################################################################
#Input von andere Team _Condition_code=E84.0,E84.1,E84.80,E84.87,E84.88,E84.9,O80_2021-03-03_15-25-58
#data <- read.csv("r/projectathon/filename.csv")
###############################################################################################################
data_folder <- "./opt/pht_data/"
result_folder <- "./opt/pht_results/"
print(paste(data_folder, "A2-1.csv", sep = ""))
data <- read.csv(paste(data_folder ,"A2-1.csv", sep = ""))# aus projektbereich ordner
# Eleminiere doppelte Patienten
data <- data %>% distinct(PatientIdentifikator, AngabeDiag1, .keep_all = TRUE)
data$PatientIdentifikator <- NULL
# Berechne Alter auf der grund von Geburtsdatum
data$AngabeAlter <- floor(age_calc(as.Date(data$AngabeGeburtsdatum), unit="years"))
data$AngabeGeburtsdatum <- NULL
#WRITE Mean Data for PHT and add up if available ---------------------------
data_pht_man = data %>% subset(AngabeGeschlecht=="m")
data_pht_woman = data %>% subset(AngabeGeschlecht=="f")
output_pht = c(length(data_pht_man$AngabeAlter), as.double(mean(data_pht_man$AngabeAlter)), length(data_pht_woman$AngabeAlter), as.double(mean(data_pht_woman$AngabeAlter)))
#Check if there are previous results -> if yes add up
if (file.exists(paste(result_folder,"result_mean.csv", sep = ""))) {
previous_mean <- read.table(paste(result_folder,"result_mean.csv", sep = ""),
header = FALSE)
i<-0
for (i in 1:4){
output_pht[i] <- output_pht[i] + as.double(previous_mean$V1[i+1])
print(previous_mean$V1[i+1])
}
print(output_pht)
#data <- rbind(stratified_wide, data_pht)
message("previous PHT result found -> Add up")
}
print(output_pht)
write.csv(output_pht, "./opt/pht_results/result_mean.csv", row.names = FALSE)
(tidyverse)
(tidyverse)
(tidyverse)
(tidyverse)
source('~/R/cord-pht-demo/R/script.R')
source('~/R/cord-pht-demo/R/script.R')
previous_mean <- read.csv2(paste(result_folder,"result_mean.csv", sep = ""),
header = FALSE)
View(previous_mean)
View(previous_mean)
source('~/R/cord-pht-demo/R/script.R')
source('~/R/cord-pht-demo/R/script.R')
View(output_pht)
###############################################################################################################
data_folder <- "./opt/pht_data/"
result_folder <- "./opt/pht_results/"
print(paste(data_folder, "A2-1.csv", sep = ""))
data <- read.csv(paste(data_folder ,"A2-1.csv", sep = ""))# aus projektbereich ordner
# Eleminiere doppelte Patienten
data <- data %>% distinct(PatientIdentifikator, AngabeDiag1, .keep_all = TRUE)
data$PatientIdentifikator <- NULL
# Berechne Alter auf der grund von Geburtsdatum
data$AngabeAlter <- floor(age_calc(as.Date(data$AngabeGeburtsdatum), unit="years"))
data$AngabeGeburtsdatum <- NULL
#WRITE Mean Data for PHT and add up if available ---------------------------
data_pht_man = data %>% subset(AngabeGeschlecht=="m")
data_pht_woman = data %>% subset(AngabeGeschlecht=="f")
output_pht = c(length(data_pht_man$AngabeAlter), as.double(mean(data_pht_man$AngabeAlter)), length(data_pht_woman$AngabeAlter), as.double(mean(data_pht_woman$AngabeAlter)))
output_pht_df <- data.frame(age_mean = c(mean((data_pht_man$AngabenAlter), mean(data_pht_woman$AngabeAlter))),
sex = c("male", "female"),
number = c(length(data._pht_man$AngabeAlter), length(data_pht_woman$AngabeAlter)))
############################################################################################################################
##         Zur Alterspyramide zu rechnen
##############################################################################################################################
library(tidyverse)
library(eeptools) # um Alter zu berechnen
library(ggplot2)# fÃ¼r muster age pyramid
options(warn=-1)# warnung ausblenden
#############################################################################################################
# FÃ¼gen Sie die Eingabedaten zu Ihrem aktuellen Arbeitsverzeichnis hinzu und geben Sie den Pfad an
###########################################################################################################################################
#Input von andere Team _Condition_code=E84.0,E84.1,E84.80,E84.87,E84.88,E84.9,O80_2021-03-03_15-25-58
#data <- read.csv("r/projectathon/filename.csv")
###############################################################################################################
data_folder <- "./opt/pht_data/"
result_folder <- "./opt/pht_results/"
print(paste(data_folder, "A2-1.csv", sep = ""))
data <- read.csv(paste(data_folder ,"A2-1.csv", sep = ""))# aus projektbereich ordner
# Eleminiere doppelte Patienten
data <- data %>% distinct(PatientIdentifikator, AngabeDiag1, .keep_all = TRUE)
data$PatientIdentifikator <- NULL
# Berechne Alter auf der grund von Geburtsdatum
data$AngabeAlter <- floor(age_calc(as.Date(data$AngabeGeburtsdatum), unit="years"))
data$AngabeGeburtsdatum <- NULL
#WRITE Mean Data for PHT and add up if available ---------------------------
data_pht_man = data %>% subset(AngabeGeschlecht=="m")
data_pht_woman = data %>% subset(AngabeGeschlecht=="f")
output_pht = c(length(data_pht_man$AngabeAlter), as.double(mean(data_pht_man$AngabeAlter)), length(data_pht_woman$AngabeAlter), as.double(mean(data_pht_woman$AngabeAlter)))
output_pht_df <- data.frame(age_mean = c(mean((data_pht_man$AngabenAlter), mean(data_pht_woman$AngabeAlter))),
sex = c("male", "female"),
number = c(length(data_pht_man$AngabeAlter), length(data_pht_woman$AngabeAlter)))
output_pht_df
output_pht_df <- data.frame(age_mean = c(mean((data_pht_man$AngabeAlter), mean(data_pht_woman$AngabeAlter))),
sex = c("male", "female"),
number = c(length(data_pht_man$AngabeAlter), length(data_pht_woman$AngabeAlter)))
output_pht_df
output_pht_df <- data.frame(age_mean = c(mean(data_pht_man$AngabeAlter), mean(data_pht_woman$AngabeAlter)),
sex = c("male", "female"),
number = c(length(data_pht_man$AngabeAlter), length(data_pht_woman$AngabeAlter)))
output_pht_df
output_pht_df %>% write.csv2("./opt/pht_results/result_mean.csv")
output_pht_df %>% write.csv2("./opt/pht_results/result_mean.csv", row.names= FALSE)
previous_mean <- read.csv2(paste(result_folder,"result_mean.csv"))
previous_mean
paste(result_folder,"result_mean.csv")
previous_mean <- read.csv2(paste0(result_folder,"result_mean.csv"))
previous_mean
previous_mean_df <- read.csv2(paste0(result_folder,"result_mean.csv"))
previous_mean_df
output_pht_df
output_both <- previous_mean_df %>%
bind_rows(
output_pht_df
)
output_both
output_both <- previous_mean_df %>%
bind_rows(
output_pht_df
) %>%
group_by(sex) %>%
dplyr::mutate(
age_mean_new = mean(age_mean * number),
number_new = sum(number)
)
output_both
output_both <- previous_mean_df %>%
bind_rows(
output_pht_df
) %>%
group_by(sex) %>%
dplyr::mutate(
number_new = sum(number),
age_mean_new = sum(age_mean * number)/number_new
)
output_both
output_both <- previous_mean_df %>%
bind_rows(
output_pht_df
) %>%
group_by(sex) %>%
dplyr::summarize(
number_new = sum(number),
age_mean_new = sum(age_mean * number)/number_new
)
output_both
output_both <- previous_mean_df %>%
bind_rows(
output_pht_df
) %>%
group_by(sex) %>%
dplyr::summarize(
number = sum(number),
age_mean = sum(age_mean * number)/number
)
output_both
output_both <- previous_mean_df %>%
bind_rows(
output_pht_df
) %>%
dplyr::rename(
number_old = number
) %>%
group_by(sex) %>%
dplyr::summarize(
number = sum(numbe_old),
age_mean = sum(age_mean * number_old/number
)
output_pht[1] <- output_pht[1] + as.double(previous_mean$[2])
output_pht[2] <- output_pht[2] + as.double(previous_mean$V1[3])
output_pht[3] <- output_pht[3] + as.double(previous_mean$V1[4])
output_pht[4] <- output_pht[4] + as.double(previous_mean$V1[5])
print(output_pht)
#data <- rbind(stratified_wide, data_pht)
message("previous PHT result found -> Add up")
}
print(output_pht)
write.csv2(output_pht_df, "./opt/pht_results/result_mean.csv", row.names = FALSE)
#----------------------------------------------------------------------------
# Teile in Altersgruppen ein
data$AngabeAlter <- cut(data$AngabeAlter, breaks = c(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120))
# Gruppiere
result  <- as.data.frame(data %>%
group_by(Einrichtungsidentifikator, AngabeDiag1, AngabeGeschlecht, AngabeAlter) %>%
summarise(Anzahl = n()))
# Entferne nicht benoetigte Spalten
result$TextDiagnose1 <- NULL
result$TextDiagnose2 <- NULL
result$AngabeDiag2 <- NULL
################## Um der Alterspyramid zu rechnen######################################################################
# Nehmen wir Geschlechht, Alter, Anzahl
############################################################################################################################
stratified <- result[,c('AngabeGeschlecht','AngabeAlter','Anzahl')]
stratified_female <- (data = stratified %>% subset(AngabeGeschlecht=="f"))
stratified_male <- (data = stratified %>% subset(AngabeGeschlecht=="m")) %>% transform(Anzahl = (data = stratified %>% subset(AngabeGeschlecht=="m"))$Anzahl * -1 )
stratified_wide <- rbind(stratified_female,stratified_male)
#Abkuerzung Ã¤ndern statt "f", "female" und statt "m" "male" verwenden
stratified_wide$AngabeGeschlecht [stratified_wide$AngabeGeschlecht == "f"] <- "female"
stratified_wide$AngabeGeschlecht [stratified_wide$AngabeGeschlecht == "m"] <- "male"
#wenn im PHT zuvor daten erstellt wurde -> auslesen
if (file.exists(paste(result_folder,"result_table.csv", sep = ""))) {
data_pht <- read.csv(paste(result_folder,"result_table.csv", sep = ""))#("pht/results.csv")
data <- rbind(stratified_wide, data_pht)
message("previous PHT result found -> Add up")
} else {
message("No previous PHT result found -> Assume first")
}
#FUER PHT DAS GANZE RAUSSCHREIBEN - inklusive neuen Daten
write.csv(stratified_wide, "./opt/pht_results/result_table.csv")
#Labellen name als angabe
names(stratified_wide)[names(stratified_wide)== "AngabeAlter"] <- "ageG"
names(stratified_wide)[names(stratified_wide)== "Anzahl"] <- "Count"
names(stratified_wide)[names(stratified_wide)== "AngabeGeschlecht"] <- "gender"
#Alterspyramid kozipieren
g <- ggplot(stratified_wide,aes(x=Count,y=ageG,fill=gender))
g + geom_bar(stat="identity")
output_both <- previous_mean_df %>%
bind_rows(
output_pht_df
) %>%
dplyr::rename(
number_old = number
) %>%
group_by(sex) %>%
dplyr::summarize(
number = sum(numbe_old),
age_mean = sum(age_mean * number_old)/number
)
output_both
output_both <- previous_mean_df %>%
bind_rows(
output_pht_df
) %>%
dplyr::rename(
number_old = number
) %>%
group_by(sex) %>%
dplyr::summarize(
number = sum(number_old),
age_mean = sum(age_mean * number_old)/number
)
output_both
source('~/R/cord-pht-demo/R/script.R')
data
source('~/R/cord-pht-demo/R/script.R')
source('~/R/cord-pht-demo/R/script.R')
source('~/R/cord-pht-demo/R/script.R', echo=TRUE)
source('~/R/cord-pht-demo/R/script.R', echo=TRUE)
source('~/R/cord-pht-demo/R/script.R')
source('~/R/cord-pht-demo/R/script.R')
source('~/R/cord-pht-demo/R/script.R')
source('~/R/cord-pht-demo/R/script.R')
