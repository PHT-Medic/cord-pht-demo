#############################################################################################################
# FÃ¼gen Sie die Eingabedaten zu Ihrem aktuellen Arbeitsverzeichnis hinzu und geben Sie den Pfad an
###########################################################################################################################################
#Input von andere Team _Condition_code=E84.0,E84.1,E84.80,E84.87,E84.88,E84.9,O80_2021-03-03_15-25-58
#data <- read.csv("r/projectathon/filename.csv")
###############################################################################################################
data_folder <- "./opt/pht_data/"
############################################################################################################################
##         Zur Alterspyramid zu rechnen
##############################################################################################################################
library(tidyverse)
library(eeptools) # um Alter zu berechnen
library(ggplot2)# fÃ¼r muster age pyramid
options(warn=-1)# warnung ausblenden
#############################################################################################################
# FÃ¼gen Sie die Eingabedaten zu Ihrem aktuellen Arbeitsverzeichnis hinzu und geben Sie den Pfad an
###########################################################################################################################################
#Input von andere Team _Condition_code=E84.0,E84.1,E84.80,E84.87,E84.88,E84.9,O80_2021-03-03_15-25-58
#data <- read.csv("r/projectathon/filename.csv")
###############################################################################################################
data_folder <- "./opt/pht_data/"
result_folder <- "./opt/pht_results/"
print(paste(data_folder, "A2-1.csv", sep = ""))
data <- read.csv(paste(data_folder ,"A2-1.csv", sep = ""))# aus projektbereich ordner
#wenn im PHT zuvor daten erstellt wurde -> auslesen
if (file.exists(paste(result_folder,"result.csv", sep = ""))) {
data_pht <- read.csv(paste(result_folder,"result.csv", sep = ""))#("pht/results.csv")
data <- rbind(data, data_pht)
message("previous PHT result found -> Add up")
} else {
message("No previous PHT result found -> Assume first")
}
# Eleminiere doppelte Patienten
data <- data %>% distinct(PatientIdentifikator, AngabeDiag1, .keep_all = TRUE)
data$PatientIdentifikator <- NULL
# Berechne Alter auf der grund von Geburtsdatum
data$AngabeAlter <- floor(age_calc(as.Date(data$AngabeGeburtsdatum), unit="years"))
data$AngabeGeburtsdatum <- NULL
# Teile in Altersgruppen ein
data$AngabeAlter <- cut(data$AngabeAlter, breaks = c(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120))
# Gruppiere
result  <- as.data.frame(data %>%
group_by(Einrichtungsidentifikator, AngabeDiag1, AngabeGeschlecht, AngabeAlter) %>%
summarise(Anzahl = n()))
# Entferne nicht benoetigte Spalten
result$TextDiagnose1 <- NULL
result$TextDiagnose2 <- NULL
result$AngabeDiag2 <- NULL
write.csv(result, "/opt/pht_result/result.csv")
write.csv(result, "/opt/pht_results/result2.csv")
write.csv(result, "/opt/pht_results/result2.csv")
write.csv(result, "/opt/pht_results/result2.csv")
getwd()
write.csv(result, "result2.csv")
################## Um der Alterspyramid zu rechnen######################################################################
# Nehmen wir Geschlechht, Alter, Anzahl
############################################################################################################################
stratified <- result[,c('AngabeGeschlecht','AngabeAlter','Anzahl')]
stratified_female <- (data = stratified %>% subset(AngabeGeschlecht=="f"))
stratified_male <- (data = stratified %>% subset(AngabeGeschlecht=="m")) %>% transform(Anzahl = (data = stratified %>% subset(AngabeGeschlecht=="m"))$Anzahl * -1 )
stratified_wide <- rbind(stratified_female,stratified_male)
#Abkuerzung Ã¤ndern statt "f", "female" und statt "m" "male" verwenden
stratified_wide$AngabeGeschlecht [stratified_wide$AngabeGeschlecht == "f"] <- "female"
stratified_wide$AngabeGeschlecht [stratified_wide$AngabeGeschlecht == "m"] <- "male"
#FÜR PHT DAS GANZE RAUSSCHREIBEN
write.csv(stratified_wide, "/opt/pht_results/result_table.csv")
#FÜR PHT DAS GANZE RAUSSCHREIBEN
write.csv(stratified_wide, "./opt/pht_results/result_table.csv")
View(stratified_female)
View(stratified_male)
View(stratified_wide)
#Alterspyramid kozipieren
g <- ggplot(stratified_wide,aes(x=Count,y=ageG,fill=gender))
View(g)
g + geom_bar(stat="identity")
#Labellen name als angabe
names(stratified_wide)[names(stratified_wide)== "AngabeAlter"] <- "ageG"
names(stratified_wide)[names(stratified_wide)== "Anzahl"] <- "Count"
names(stratified_wide)[names(stratified_wide)== "AngabeGeschlecht"] <- "gender"
#Alterspyramid kozipieren
g <- ggplot(stratified_wide,aes(x=Count,y=ageG,fill=gender))
g + geom_bar(stat="identity")
View(data)
#############################################################################################################
# FÃ¼gen Sie die Eingabedaten zu Ihrem aktuellen Arbeitsverzeichnis hinzu und geben Sie den Pfad an
###########################################################################################################################################
#Input von andere Team _Condition_code=E84.0,E84.1,E84.80,E84.87,E84.88,E84.9,O80_2021-03-03_15-25-58
#data <- read.csv("r/projectathon/filename.csv")
###############################################################################################################
data_folder <- "./opt/pht_data/"
result_folder <- "./opt/pht_results/"
print(paste(data_folder, "A2-1.csv", sep = ""))
data <- read.csv(paste(data_folder ,"A2-1.csv", sep = ""))# aus projektbereich ordner
#wenn im PHT zuvor daten erstellt wurde -> auslesen
if (file.exists(paste(result_folder,"input.csv", sep = ""))) {
data_pht <- read.csv(paste(result_folder,"input.csv", sep = ""))#("pht/results.csv")
data <- rbind(data, data_pht)
message("previous PHT result found -> Add up")
} else {
message("No previous PHT result found -> Assume first")
}
View(data)
# Eleminiere doppelte Patienten
data <- data %>% distinct(PatientIdentifikator, AngabeDiag1, .keep_all = TRUE)
data$PatientIdentifikator <- NULL
# Berechne Alter auf der grund von Geburtsdatum
data$AngabeAlter <- floor(age_calc(as.Date(data$AngabeGeburtsdatum), unit="years"))
data$AngabeGeburtsdatum <- NULL
View(data)
print(mean(data$AngabeAlter))
print(str(data))
print(len(data))
print(length(data))
print(length(data$AngabeAlter))
print(mean(data$AngabeAlter))
print(length(data$AngabeAlter))
print(mean(data$AngabeAlter %>% subset(AngabeGeschlecht=="m")))
print(mean(data %>% subset(AngabeGeschlecht=="m")))
print(mean(data %>% subset(AngabeGeschlecht=="m")$AngabeGeschlecht))
print(mean((data %>% subset(AngabeGeschlecht=="m"))$AngabeGeschlecht))
print(data %>% subset(AngabeGeschlecht=="m"))
print((data = data %>% subset(AngabeGeschlecht=="m"))$AngabeGeschlecht)
data <- read.csv(paste(data_folder ,"A2-1.csv", sep = ""))# aus projektbereich ordner
#wenn im PHT zuvor daten erstellt wurde -> auslesen
if (file.exists(paste(result_folder,"input.csv", sep = ""))) {
data_pht <- read.csv(paste(result_folder,"input.csv", sep = ""))#("pht/results.csv")
data <- rbind(data, data_pht)
message("previous PHT result found -> Add up")
} else {
message("No previous PHT result found -> Assume first")
}
# Eleminiere doppelte Patienten
data <- data %>% distinct(PatientIdentifikator, AngabeDiag1, .keep_all = TRUE)
data$PatientIdentifikator <- NULL
# Berechne Alter auf der grund von Geburtsdatum
data$AngabeAlter <- floor(age_calc(as.Date(data$AngabeGeburtsdatum), unit="years"))
data$AngabeGeburtsdatum <- NULL
#WRITE SOME Data for PHT
print((data_pht = data %>% subset(AngabeGeschlecht=="m"))$AngabeAlter)
#WRITE SOME Data for PHT
print(length((data_pht = data %>% subset(AngabeGeschlecht=="m"))$AngabeAlter))
#WRITE SOME Data for PHT
data_pht_man = data %>% subset(AngabeGeschlecht=="m")
data_pht_woman = data %>% subset(AngabeGeschlecht=="m")
print(length(data_pht_man),mean(data_pht_man))
print(mean(data_pht_man))
print(data_pht_man)
print(length(data_pht_man), data_pht_man$AngabeAlter)
print(length(data_pht_man), mean(data_pht_man$AngabeAlter))
print( mean(data_pht_man$AngabeAlter))
print(length(data_pht_man))
print(length(data_pht_man$AngabeAlter))
output_pht = array(c(length(data_pht_man$AngabeAlter), mean(data_pht_man$AngabeAlter)))
output_pht = c(length(data_pht_man$AngabeAlter), mean(data_pht_man$AngabeAlter), length(data_pht_woman$AngabeAlter), mean(data_pht_woman$AngabeAlter))
output_pht <- c(length(data_pht_man$AngabeAlter), mean(data_pht_man$AngabeAlter), length(data_pht_woman$AngabeAlter), mean(data_pht_woman$AngabeAlter))
output_pht = c(length(data_pht_man$AngabeAlter), mean(data_pht_man$AngabeAlter), length(data_pht_woman$AngabeAlter), mean(data_pht_woman$AngabeAlter))
print(output_pht)
#WRITE SOME Data for PHT
data_pht_man = data %>% subset(AngabeGeschlecht=="m")
data_pht_woman = data %>% subset(AngabeGeschlecht=="w")
print( mean(data_pht_man$AngabeAlter))
print(length(data_pht_man$AngabeAlter))
output_pht = c(length(data_pht_man$AngabeAlter), mean(data_pht_man$AngabeAlter), length(data_pht_woman$AngabeAlter), mean(data_pht_woman$AngabeAlter))
print(output_pht)
#WRITE SOME Data for PHT
data_pht_man = data %>% subset(AngabeGeschlecht=="m")
data_pht_woman = data %>% subset(AngabeGeschlecht=="f")
print( mean(data_pht_man$AngabeAlter))
print(length(data_pht_man$AngabeAlter))
output_pht = c(length(data_pht_man$AngabeAlter), mean(data_pht_man$AngabeAlter), length(data_pht_woman$AngabeAlter), mean(data_pht_woman$AngabeAlter))
print(output_pht)
#WRITE SOME Data for PHT
data_pht_man = data %>% subset(AngabeGeschlecht=="m")
data_pht_woman = data %>% subset(AngabeGeschlecht=="f")
output_pht = c(length(data_pht_man$AngabeAlter), mean(data_pht_man$AngabeAlter), length(data_pht_woman$AngabeAlter), mean(data_pht_woman$AngabeAlter))
print(output_pht)
write.csv(output_pht, "./opt/pht_results/result_mean.csv")
write.csv(output_pht, "./opt/pht_results/result_mean.csv", row.names = FALSE)
write.csv(output_pht, "./opt/pht_results/result_mean.csv", row.names = FALSE)
write.csv2(output_pht, "./opt/pht_results/result_mean.csv", row.names = FALSE)
write.csv2(output_pht, "./opt/pht_results/result_mean.csv", row.names = FALSE)
